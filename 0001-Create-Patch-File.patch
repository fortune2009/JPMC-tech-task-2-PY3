From 42cdb4c3094c6035cdce8c3458d893ec9e16ae47 Mon Sep 17 00:00:00 2001
From: fortune2009 <fortunekbz2009@gmail.com>
Date: Sat, 3 Oct 2020 04:54:47 +0100
Subject: [PATCH] Create Patch File

---
 src/App.tsx         | 26 ++++++++++++++++++++------
 src/DataStreamer.ts | 23 +++++++++++------------
 src/Graph.tsx       | 15 +++++++++++++--
 3 files changed, 44 insertions(+), 20 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..0857b86 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)   
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({ 
+          data: [...this.state.data, ...serverResponds],
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000){
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 78583cb..bf5e8db 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -1,21 +1,21 @@
 export interface Order {
-  price: Number,
-  size: Number,
+  price: Number;
+  size: Number;
 }
 /**
  * The datafeed server returns an array of ServerRespond with 2 stocks.
  * We do not have to manipulate the ServerRespond for the purpose of this task.
  */
 export interface ServerRespond {
-  stock: string,
-  top_bid: Order,
-  top_ask: Order,
-  timestamp: Date,
+  stock: string;
+  top_bid: Order;
+  top_ask: Order;
+  timestamp: Date;
 }
 
 class DataStreamer {
   // The url where datafeed server is listening
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  static API_URL: string = "http://localhost:8080/query?id=1";
 
   /**
    * Send request to the datafeed server and executes callback function on success
@@ -23,18 +23,17 @@ class DataStreamer {
    */
   static getData(callback: (data: ServerRespond[]) => void): void {
     const request = new XMLHttpRequest();
-    request.open('GET', DataStreamer.API_URL, false);
+    request.open("GET", DataStreamer.API_URL, false);
 
     request.onload = () => {
       if (request.status === 200) {
         callback(JSON.parse(request.responseText));
       } else {
-        alert ('Request failed');
+        alert("Request failed");
       }
-    }
-
+    };
     request.send();
   }
 }
 
-export default DataStreamer;
\ No newline at end of file
+export default DataStreamer;
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..fdddd8c 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,8 +32,19 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
+    elem.setAttribute('view', 'y-line')
+    elem.setAttribute('column-pivots', '["stock"]')
+    elem.setAttribute('row-pivots', '["timestamp"]')
+    elem.setAttribute('columns', '["top_ask_price"]')
+    elem.setAttribute('aggregates', `
+    {"stock":"distinct count",
+    "top_ask_price":"avg",
+  "top_bid_price":"avg",
+  "timestamp":"distinct count"}`);
+  
+    
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
-- 
2.25.1

